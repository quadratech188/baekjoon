#include <iterator>
#include <unordered_set>
#include <vector>

template <typename T>
class Graph {
	std::vector<T> values;
	std::vector<std::unordered_set<T>> children;

	Graph();

	Graph(std::vector<T>& values) {
		this->values = values;
	}

	Graph(size_t size) {
		values.resize(size);
		children.resize(size);
	}

	T& operator[](size_t index) {
		return values[index];
	}

	void add(T& value) {
		values.push_back(value);
		children.push_back();
	}

	class iterator {
	private:
		int index;
		Graph<T>& graph;
	public:
		using iterator_category = std::input_iterator_tag;
		using value_type = T;
		using pointer = T*;
		using reference = T&;

		reference operator*() const {return graph.values[index];};
		pointer operator->() {return graph.values[index];};

		iterator& operator++() {
			index ++;
			return *this;
		}
		
		iterator operator++(int) {
			iterator temp = *this;
			++(*this);
			return temp;
		}

		friend bool operator!=(const iterator& a, const iterator& b) {
			return a.graph == b.graph && a.index == b.index;
		}
	};
};
