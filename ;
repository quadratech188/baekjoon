#include <unordered_set>
#include <vector>
#include <memory>

template <typename T>
class Graph {
	public:
	struct Node {
		T value;
		std::unordered_set<size_t> children;
	};

	private:
	std::vector<Node> nodes;

	public:
	Graph(std::vector<T>& values) {
		nodes.reserve(values.size());
		for (auto& value: values) {
			nodes.push_back({
					.value = value
					});
		}
	}

	Node& operator[](const size_t index) const {
		return nodes[index];
	}

	void link(size_t parent, size_t child) {
		nodes[parent].children.insert(child);
	}

	void toTree(size_t root) {
		for (size_t childIndex: nodes[root].children) {
			nodes[childIndex].children.erase(root);
			toTree(childIndex);
		}
	}
};
